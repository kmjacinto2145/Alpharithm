import talib  
import numpy as np

def initialize(context):
    set_long_only()
    set_max_order_count(1)
    context.spy = sid(8554)
    
    schedule_function(handle_data, date_rules.every_day(), time_rules.market_open())        
    context.longed = False
    
    
    
def vwap(prices, volumes):
    return (prices * volumes).sum() / volumes.sum()

def vwap_std(prices, volumes, bar_count):
    deviation_sum = 0
    
    for day in prices.index:
        deviation_sum += (prices[day] - vwap(prices, volumes)) ** 2
        
    return (1/(bar_count - 1) * deviation_sum) ** (1/2)
        
        

def handle_data(context, data):  
    spy = context.spy    
    bar_count = 30
        
    p_history = data.history(context.spy, fields="close", bar_count = bar_count, frequency="1d")
    v_history = data.history(context.spy, fields="volume", bar_count = bar_count, frequency="1d")
    
    price_d1 = np.diff(p_history)
    obv_d1 = np.diff(talib.OBV(p_history, v_history))
    
    price_d1_norm = (price_d1[-1] - np.mean(price_d1)) / np.std(price_d1)
    #obv_d1_norm = (obv_d1[-1] - np.mean(obv_d1)) / np.std(obv_d1)
    obv_d1_norm = obv_d1[-1] / np.std(obv_d1)
    
    std_30 = np.std(p_history)
    
    vwap1 = vwap(p_history, v_history)
    
    vwap_norm = (p_history[-1] - vwap1) / vwap_std(p_history, v_history, bar_count)
    
    print(vwap_norm)
    
    
    if std_30 > 0:
        
        if obv_d1_norm + vwap_norm > 0.5 and context.longed is False:
            order_target_percent(spy, 1)
            context.longed = True
        elif obv_d1_norm + vwap_norm < -0.5 and context.longed is True:
            order_target_percent(spy, 0)   
            context.longed = False
    
    
    record(vwap_norm = vwap_norm)
    record(obv_d1_norm = obv_d1_norm)
    
    
